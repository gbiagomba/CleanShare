name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  build:
    name: Build ${{ matrix.label }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - label: linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: cleanshare-linux-x64
            ext: ""
          - label: linux arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: cleanshare-linux-arm64
            ext: ""

          # macOS
          - label: macOS x64
            os: macos-13
            target: x86_64-apple-darwin
            artifact: cleanshare-macos-x64
            ext: ""
          - label: macOS arm64
            os: macos-14
            target: aarch64-apple-darwin
            artifact: cleanshare-macos-arm64
            ext: ""

          # Windows
          - label: windows x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: cleanshare-windows-x64
            ext: ".exe"
          - label: windows arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact: cleanshare-windows-arm64
            ext: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (Linux ARM64)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cargo build (release)
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          set -euo pipefail
          BIN_NAME=cleanshare
          TARGET=${{ matrix.target }}
          EXT=${{ matrix.ext }}
          OUT=${{ matrix.artifact }}
          mkdir -p dist
          # Copy binary
          cp target/${TARGET}/release/${BIN_NAME}${EXT} dist/${OUT}${EXT}
          # Package
          cd dist
          if [[ "${EXT}" == ".exe" ]]; then
            7z a ${OUT}.zip ${OUT}${EXT} >/dev/null
            rm -f ${OUT}${EXT}
          else
            tar -czf ${OUT}.tar.gz ${OUT}${EXT}
            rm -f ${OUT}${EXT}
          fi
          # Checksums
          if [[ -f ${OUT}.zip ]]; then
            shasum -a 256 ${OUT}.zip > ${OUT}.zip.sha256 || sha256sum ${OUT}.zip > ${OUT}.zip.sha256
          else
            shasum -a 256 ${OUT}.tar.gz > ${OUT}.tar.gz.sha256 || sha256sum ${OUT}.tar.gz > ${OUT}.tar.gz.sha256
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

